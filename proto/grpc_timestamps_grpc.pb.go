// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: grpc_timestamps.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusClient interface {
	ReceiveRemovePhrase(ctx context.Context, in *RemovePhrase, opts ...grpc.CallOption) (*Empty, error)
	ReceivePhrase(ctx context.Context, in *Phrase, opts ...grpc.CallOption) (*Empty, error)
	ReceiveNuke(ctx context.Context, in *Nuke, opts ...grpc.CallOption) (*Empty, error)
	ReceiveAegis(ctx context.Context, in *Aegis, opts ...grpc.CallOption) (*Empty, error)
	ReceiveMutelinks(ctx context.Context, in *Mutelinks, opts ...grpc.CallOption) (*Empty, error)
}

type statusClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusClient(cc grpc.ClientConnInterface) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) ReceiveRemovePhrase(ctx context.Context, in *RemovePhrase, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_timestamps.Status/ReceiveRemovePhrase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ReceivePhrase(ctx context.Context, in *Phrase, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_timestamps.Status/ReceivePhrase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ReceiveNuke(ctx context.Context, in *Nuke, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_timestamps.Status/ReceiveNuke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ReceiveAegis(ctx context.Context, in *Aegis, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_timestamps.Status/ReceiveAegis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ReceiveMutelinks(ctx context.Context, in *Mutelinks, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_timestamps.Status/ReceiveMutelinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
// All implementations must embed UnimplementedStatusServer
// for forward compatibility
type StatusServer interface {
	ReceiveRemovePhrase(context.Context, *RemovePhrase) (*Empty, error)
	ReceivePhrase(context.Context, *Phrase) (*Empty, error)
	ReceiveNuke(context.Context, *Nuke) (*Empty, error)
	ReceiveAegis(context.Context, *Aegis) (*Empty, error)
	ReceiveMutelinks(context.Context, *Mutelinks) (*Empty, error)
	mustEmbedUnimplementedStatusServer()
}

// UnimplementedStatusServer must be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (UnimplementedStatusServer) ReceiveRemovePhrase(context.Context, *RemovePhrase) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRemovePhrase not implemented")
}
func (UnimplementedStatusServer) ReceivePhrase(context.Context, *Phrase) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePhrase not implemented")
}
func (UnimplementedStatusServer) ReceiveNuke(context.Context, *Nuke) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveNuke not implemented")
}
func (UnimplementedStatusServer) ReceiveAegis(context.Context, *Aegis) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAegis not implemented")
}
func (UnimplementedStatusServer) ReceiveMutelinks(context.Context, *Mutelinks) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMutelinks not implemented")
}
func (UnimplementedStatusServer) mustEmbedUnimplementedStatusServer() {}

// UnsafeStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServer will
// result in compilation errors.
type UnsafeStatusServer interface {
	mustEmbedUnimplementedStatusServer()
}

func RegisterStatusServer(s grpc.ServiceRegistrar, srv StatusServer) {
	s.RegisterService(&Status_ServiceDesc, srv)
}

func _Status_ReceiveRemovePhrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePhrase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ReceiveRemovePhrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_timestamps.Status/ReceiveRemovePhrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ReceiveRemovePhrase(ctx, req.(*RemovePhrase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ReceivePhrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Phrase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ReceivePhrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_timestamps.Status/ReceivePhrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ReceivePhrase(ctx, req.(*Phrase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ReceiveNuke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nuke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ReceiveNuke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_timestamps.Status/ReceiveNuke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ReceiveNuke(ctx, req.(*Nuke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ReceiveAegis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aegis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ReceiveAegis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_timestamps.Status/ReceiveAegis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ReceiveAegis(ctx, req.(*Aegis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ReceiveMutelinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mutelinks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ReceiveMutelinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_timestamps.Status/ReceiveMutelinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ReceiveMutelinks(ctx, req.(*Mutelinks))
	}
	return interceptor(ctx, in, info, handler)
}

// Status_ServiceDesc is the grpc.ServiceDesc for Status service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Status_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_timestamps.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveRemovePhrase",
			Handler:    _Status_ReceiveRemovePhrase_Handler,
		},
		{
			MethodName: "ReceivePhrase",
			Handler:    _Status_ReceivePhrase_Handler,
		},
		{
			MethodName: "ReceiveNuke",
			Handler:    _Status_ReceiveNuke_Handler,
		},
		{
			MethodName: "ReceiveAegis",
			Handler:    _Status_ReceiveAegis_Handler,
		},
		{
			MethodName: "ReceiveMutelinks",
			Handler:    _Status_ReceiveMutelinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_timestamps.proto",
}
